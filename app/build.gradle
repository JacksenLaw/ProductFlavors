apply plugin: 'com.android.application'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.github.productflavors"
        minSdkVersion 21
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //差异化打包，名字任意起
    flavorDimensions 'normal'
    /*多渠道的一些配置 */
    productFlavors {
        normala {
            dimension = 'normal'
            // 设置applicationId（这里很重要，两个相同applicationId的apk不同同时安装在同一台Android手机中）
            applicationId = 'com.github.productflavorsnormala'
            targetSdkVersion 29
            maxSdkVersion 29
            minSdkVersion 21
//            signingConfig signingConfigs.release
            buildConfigField "String", "BASE_URL", "\"http://www.baidu.com\""
//            resValue "string", "app_name", "DemoA"//注释：须删除main下 res/values/Strings.xml 中 app_name
            manifestPlaceholders = [
                    app_name      : "DemoA",
                    app_icon      : "@mipmap/ic_launcher",
                    app_round_icon: "@mipmap/ic_launcher_round",
                    app_theme     : "@style/AAAA"//配置主题
            ]

            versionCode 1
            versionName "1.0"

        }
        normalb {
            dimension = 'normal'
            applicationId = 'com.github.productflavorsnormalb'
            targetSdkVersion 29
            maxSdkVersion 29
            minSdkVersion 21
//            signingConfig signingConfigs.release
            buildConfigField "String", "BASE_URL", "\"http://www.qq.com\""
//            resValue "string", "app_name", "DemoB"//注释：须删除main下 res/values/Strings.xml 中 app_name
            manifestPlaceholders = [
                    app_name      : "DemoB",
                    app_icon      : "@mipmap/ic_launcher",
                    app_round_icon: "@mipmap/ic_launcher_round",
                    app_theme     : "@style/BBBB"//配置主题
            ]

            versionCode 1
            versionName "1.0"

        }
    }

    //指定版本加载对应的代码or配置
    sourceSets {
        normala {
            manifest.srcFile '/src/normala/AndroidManifest.xml'
        }
        normalb {
            manifest.srcFile '/src/normalb/AndroidManifest.xml'
        }
    }

    buildTypes {

        debug {
//            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

    }

    //签名文件配置: 这是第一种写法：
/*    signingConfigs {
        debug {
            storeFile file('../sign.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            storeFile file('../sign.jks')
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }*/

//  这是签名的第二种写法  调用getSigningProperties方法里面的函数,
//  通过读取里面的配置文件进行操作：
//

    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    getSigningProperties()

    //自定义输出包名的设置
    applicationVariants.all { variant ->
        //获取当前渠道
        def flavor = variant.productFlavors[0]
        //获取当前build版本
        def buildType = variant.buildType.name
        //获取当前时间的"YYYY-MM-dd"格式。
        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
        variant.outputs.all {
            if (buildType == "release") {
                //输出apk名称为：渠道名_版本名_时间.apk
                def fileName = " ${flavor.name}-${variant.buildType.name}_v${flavor.versionName}_${createTime}.apk"
                outputFileName = fileName
            }
        }
    }

}

//读取签名配置文件
def getSigningProperties() {

    def propFile = file('sign.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

        } else {

            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'sign.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

//获取版本号：
def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames
        //仅在assembleRelease任务是增加版本号
        if ('assembleRelease' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}


//获取当前时间
def getCurrentTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
